#!/bin/bash

# Definir os parâmetros padrão
PIPELINE_NAME="3scale-hp-token"
GITLAB_GITOPS_GROUP="https://gitlab.com/3scale-gitops/policy-camel"
GITLAB_SOURCE_CODE_GROUP="https://gitlab.com/3scale2_source"
GITLAB_BRANCH="main"  # Valor padrão para o branch
QUAY_URL="quay.io/iam_roger_io"  # URL padrão do Quay

# Tratamento de parâmetros
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --name) PIPELINE_NAME="$2"; shift ;;
        --gitlab-gitops-group) GITLAB_GITOPS_GROUP="$2"; shift ;;
        --gitlab-source-code-group) GITLAB_SOURCE_CODE_GROUP="$2"; shift ;;
        --gitlab-branch) GITLAB_BRANCH="$2"; shift ;;  # Novo parâmetro para o branch
        --quay-url) QUAY_URL="$2"; shift ;;  # Novo parâmetro para a URL do Quay
        *) echo "Parâmetro desconhecido: $1"; exit 1 ;;
    esac
    shift
done

# Nome do arquivo a ser gerado
OUTPUT_FILE="../pipelines/deploy-${PIPELINE_NAME}-policy-ci.yaml"

# Geração do arquivo YAML
cat <<EOF > "$OUTPUT_FILE"
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: deploy-${PIPELINE_NAME}-ci
  namespace: 3scale-pipelines
spec:
  finally:
    - name: finalizar-pipeline
      params:
        - name: SOURCE_CODE_FOLDER
          value: \$(params.SOURCE_CODE_FOLDER)
      taskRef:
        kind: Task
        name: 3scale-finalizar-pipeline
      workspaces:
        - name: source
          workspace: shared-workspace
  params:
    - default: ${PIPELINE_NAME}
      description: Nome da pasta do projeto
      name: SOURCE_CODE_FOLDER
      type: string
    - default: '${QUAY_URL}/${PIPELINE_NAME}'
      description: Nome da imagem
      name: IMAGE_NAME
      type: string
    - default: '${GITLAB_BRANCH}'  # Usando o novo parâmetro para o branch
      description: Nome da branch
      name: SOURCE_CODE_BRANCH
      type: string
    - default: '${GITLAB_SOURCE_CODE_GROUP}/${PIPELINE_NAME}.git'
      description: URL do repositório git
      name: SOURCE_CODE_REPOSITORY
      type: string
    - default: '${GITLAB_GITOPS_GROUP}/${PIPELINE_NAME}.git'
      description: URL do repositório de gitops
      name: GITOPS_REPOSITORY
      type: string
    - default: '${GITLAB_BRANCH}'  # Usando o novo parâmetro para o branch de gitops
      description: Nome da branch de gitops
      name: GITOPS_BRANCH
      type: string
    - default: gitops
      description: Nome da pasta de gitops
      name: GITOPS_FOLDER
      type: string
  tasks:
    - name: maven-package
      params:
        - name: SOURCE_CODE_FOLDER
          value: \$(params.SOURCE_CODE_FOLDER)
      runAfter:
        - clone-source-code
      taskRef:
        kind: Task
        name: 3scale-maven-package
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: maven-settings
          workspace: maven-settings
    - name: build-image
      params:
        - name: IMAGE
          value: '\$(params.IMAGE_NAME):\$(cat /workspace/source/artifact-id)'
        - name: BUILDER_IMAGE
          value: 'registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe'
        - name: STORAGE_DRIVER
          value: vfs
        - name: DOCKERFILE
          value: ./Dockerfile
        - name: CONTEXT
          value: \$(params.SOURCE_CODE_FOLDER)
        - name: TLSVERIFY
          value: 'false'
        - name: FORMAT
          value: oci
        - name: BUILD_EXTRA_ARGS
          value: ''
        - name: PUSH_EXTRA_ARGS
          value: ''
        - name: SKIP_PUSH
          value: 'false'
      runAfter:
        - maven-package
      taskRef:
        kind: Task
        name: 3scale-build-image
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: dockerconfig
          workspace: docker-config-json
    - name: clone-gitops-repo
      params:
        - name: url
          value: \$(params.GITOPS_REPOSITORY)
        - name: revision
          value: \$(params.GITOPS_BRANCH)
        - name: refspec
          value: ''
        - name: submodules
          value: 'true'
        - name: depth
          value: '1'
        - name: sslVerify
          value: 'false'
        - name: crtFileName
          value: ca-bundle.crt
        - name: subdirectory
          value: \$(params.GITOPS_FOLDER)
        - name: sparseCheckoutDirectories
          value: ''
        - name: deleteExisting
          value: 'false'
        - name: httpProxy
          value: ''
        - name: httpsProxy
          value: ''
        - name: noProxy
          value: ''
        - name: verbose
          value: 'true'
        - name: gitInitImage
          value: 'registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:a538c423e7a11aae6ae582a411fdb090936458075f99af4ce5add038bb6983e8'
        - name: userHome
          value: /tekton/home
      runAfter:
        - build-image
      taskRef:
        kind: Task
        name: 3scale-git-clone
      workspaces:
        - name: output
          workspace: shared-workspace
    - name: update-image
      params:
        - name: SCRIPT
          value: |-

            IMAGE_NAME=\$(params.IMAGE_NAME):\$(cat /workspace/source/artifact-id)

            IMAGE_NAME=$IMAGE_NAME yq -i '.policy.image=strenv(IMAGE_NAME)' ./gitops/values.yaml 

            echo "---------" && cat  ./gitops/values.yaml
        - name: image
          value: 'quay.io/iam_roger_io/openjdk-11-tools:1.0'
        - name: files
          value: []
      runAfter:
        - clone-gitops-repo
      taskRef:
        kind: Task
        name: 3scale-yq
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: push-gitops-repo
      params:
        - name: GITOPS_FOLDER
          value: \$(params.GITOPS_FOLDER)
        - name: BRANCH
          value: \$(params.GITOPS_BRANCH)
      runAfter:
        - update-image
      taskRef:
        kind: Task
        name: 3scale-git-push
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: inicializar
      params:
        - name: PIPELINE_NAME
          value: \$(params.SOURCE_CODE_FOLDER)
      taskRef:
        kind: Task
        name: 3scale-inicializar-pipeline
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: dockerconfig
          workspace: docker-config-json
    - name: clone-source-code
      params:
        - name: url
          value: \$(params.SOURCE_CODE_REPOSITORY)
        - name: revision
          value: \$(params.SOURCE_CODE_BRANCH)
        - name: refspec
          value: ''
        - name: submodules
          value: 'true'
        - name: depth
          value: '1'
        - name: sslVerify
          value: 'false'
        - name: crtFileName
          value: ca-bundle.crt
        - name: subdirectory
          value: \$(params.SOURCE_CODE_FOLDER)
        - name: sparseCheckoutDirectories
          value: ''
        - name: deleteExisting
          value: 'true'
        - name: httpProxy
          value: ''
        - name: httpsProxy
          value: ''
        - name: noProxy
          value: ''
        - name: verbose
          value: 'true'
        - name: gitInitImage
          value: 'registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:a538c423e7a11aae6ae582a411fdb090936458075f99af4ce5add038bb6983e8'
        - name: userHome
          value: /tekton/home
      runAfter:
        - inicializar
      taskRef:
        kind: Task
        name: 3scale-git-clone
      workspaces:
        - name: output
          workspace: shared-workspace
  workspaces:
    - name: shared-workspace
    - name: maven-settings
    - name: docker-config-json

EOF

echo "Arquivo $OUTPUT_FILE gerado com sucesso!"
